# ---- Stage 1: Builder ----
# This stage is for installing dependencies and will not be part of the final image.
# It improves build performance by caching the dependency installation layer.
FROM python:3.10-slim AS builder

# Set the working directory inside the container.
WORKDIR /app

RUN apt-get update && \
    apt-get install -y build-essential

# Copy only the requirements file first to take advantage of Docker cache.
# If requirements.txt doesn't change, this step and subsequent ones will be skipped on rebuilds.
COPY requirements.txt requirements.txt

# Install the Python dependencies.
# The --no-cache-dir flag helps keep the image size down.
RUN pip install --no-cache-dir -r requirements.txt

RUN pip install gunicorn gevent libgomp1 

# ---- Stage 2: Final Image ----
# Start from a clean base image to minimize the final image size.
FROM python:3.10-slim

# Set the working directory. This should be the same as the builder stage.
WORKDIR /app

# Copy the installed packages from the builder stage.
COPY --from=builder /usr/local/lib/python3.10/site-packages /usr/local/lib/python3.10/site-packages

# Copy the gunicorn executable from the builder to the final image.
COPY --from=builder /usr/local/bin/gunicorn /usr/local/bin/gunicorn

# Copy the application source code into the container.
# This should be the last step to ensure changes to code don't invalidate the cache for dependencies.
# This copy command is updated to reflect your project structure.
COPY llm ./llm
COPY llm/gunicorn.conf.py ./llm/gunicorn.conf.py

# Expose the port that Gunicorn will listen on.
# This port should match the one you've configured in your docker-compose.yml file.
EXPOSE 5000

# Set the command to run your application.
# The "CMD" instruction provides defaults for an executing container.
# This command is what will be run when the container starts.
# The command now points to the correct module path: llm.llm_flask:app.
CMD ["python", "-m", "gunicorn", "--config", "llm/gunicorn.conf.py", "llm.llm_flask:app"]